#include "array.h"

%TEMPLATE_BEGIN%
Array_%TYPENP%* newArray_%TYPENP%(Arena* arena)
{
    return newArrayc_%TYPENP%(arena, 16);
}

Array_%TYPENP%* newArrayc_%TYPENP%(Arena* arena, u32 capacity)
{
    Array_%TYPENP%* a = allocate(arena, sizeof(Array_%TYPENP%));
    a->length = 0;
    a->capacity = capacity;
    a->items = allocate(arena, sizeof(%TYPE%) * a->capacity);
    return a;
}

Array_%TYPENP%* newArraya_%TYPENP%(Arena* arena, %TYPE%* array, u32 len)
{
    u32 capacity = 1;
    while (capacity < len)
        capacity *= 2;

    Array_%TYPENP%* a = newArrayc_%TYPENP%(arena, capacity);
    memcpy(a->items, array, sizeof(%TYPE%) * len);
    a->length = len;

    return a;
}

Result_%TYPENP% get_%TYPENP%(Array_%TYPENP%* array, u32 i)
{
    if (i < 0 || i >= array->length)
        return fail_%TYPENP%(ERROR_OUT_OF_BOUNDS);
    return success_%TYPENP%(array->items[i]);
}

Error set_%TYPENP%(Array_%TYPENP%* array, u32 i, %TYPE% val)
{
    if (i < 0 || i >= array->length)
        return ERROR_OUT_OF_BOUNDS;
    array->items[i] = val;
    return SUCCESS;
}

void push_%TYPENP%(Arena* arena, Array_%TYPENP%* array, %TYPE% element)
{
    array->length++;
    if (array->length >= array->capacity) {
        array->items = reallocate(arena, array->items, array->capacity, array->capacity * 2);
        array->capacity *= 2;
    }
    array->items[array->length - 1] = element;
}

void pop_%TYPENP%(Array_%TYPENP%* array)
{
    array->length--;
    if (array->length < 0)
        array->length = 0;
}

void clear_%TYPENP%(Array_%TYPENP%* array)
{
    memset(array->items, 0, sizeof(%TYPE%) * array->length);
    array->length = 0;
}
