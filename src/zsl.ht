#ifndef ZSL_H
#define ZSL_H

%FORWARD%

struct sString;
typedef struct sString String;

// BEGIN ZTYPES
#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define f32 float
#define f64 double

#if defined(_MSC_VER) || defined(__SYMBIAN32__)
#include <errno.h> // NOLINT

typedef unsigned char u8;
typedef signed char i8;
typedef unsigned short u16;
typedef signed short i16;
typedef unsigned int u32;
typedef signed int i32;
typedef unsigned long long u64;
typedef signed long i64;
#else
#include <sys/errno.h> // NOLINT

#include <stdint.h>
typedef uint8_t u8;
typedef int8_t i8;
typedef uint16_t u16;
typedef int16_t i16;
typedef uint32_t u32;
typedef int32_t i32;
typedef unsigned long long u64;
typedef int64_t i64;
#endif

f32 safeTrunc_i32_f32(i32 value);
f32 safeTrunc_u32_f32(u32 value);
f32 safeTrunc_u64_f32(u64 value);
i32 safeTrunc_f32_i32(f32 value);
i32 safeTrunc_u32_i32(u32 value);
u32 safeTrunc_u64_u32(u64 value);

typedef struct {
    f32 x, y;
} v2f;

typedef struct {
    i32 x, y;
} v2i;

typedef struct {
    u32 x, y;
} v2u;

typedef struct {
    f32 x, y, z;
} v3f;

typedef struct {
    i32 x, y, z;
} v3i;

typedef struct {
    u8 r, g, b, a;
} color;

typedef struct {
    f32 x, y, width, height;
} rec;

#ifdef ZDEBUG
    #define STRINGIFY(x) #x
    #define TOSTRING(x) STRINGIFY(x)
    #define CONCAT_FILE_LINE(file, line) file ":" TOSTRING(line)
    #define FILE_LINE CONCAT_FILE_LINE(__FILE__, __LINE__)

    #define zlog(...) printf("[INFO] [" FILE_LINE "] " __VA_ARGS__)
    #define zlog_warn(...) printf("[WARN] [" FILE_LINE "] " __VA_ARGS__)
    #define zlog_error(...) printf("[ERROR] [" FILE_LINE "] " __VA_ARGS__)
#else
    #define zlog(...)
    #define zlog_warn(...)
    #define zlog_error(...)
#endif

#define FORWARD(s, t)\
    struct s;\
    typedef struct s t;

#define ann(exp) (exp); assert((exp) != NULL);
// END ZTYPES

// BEGIN ZMATH
#define MIN_PROTOTYPE_(t) t min_##t(t a, t b);
MIN_PROTOTYPE_(u8)
MIN_PROTOTYPE_(i8)
MIN_PROTOTYPE_(u16)
MIN_PROTOTYPE_(i16)
MIN_PROTOTYPE_(u32)
MIN_PROTOTYPE_(i32)
MIN_PROTOTYPE_(u64)
MIN_PROTOTYPE_(i64)
MIN_PROTOTYPE_(f32)
MIN_PROTOTYPE_(f64)

#define MAX_PROTOTYPE_(t) t max_##t(t a, t b);
MAX_PROTOTYPE_(u8)
MAX_PROTOTYPE_(i8)
MAX_PROTOTYPE_(u16)
MAX_PROTOTYPE_(i16)
MAX_PROTOTYPE_(u32)
MAX_PROTOTYPE_(i32)
MAX_PROTOTYPE_(u64)
MAX_PROTOTYPE_(i64)
MAX_PROTOTYPE_(f32)
MAX_PROTOTYPE_(f64)

#define CLAMP_PROTOTYPE_(t) t clamp_##t(t val, t min, t max);
CLAMP_PROTOTYPE_(u8)
CLAMP_PROTOTYPE_(i8)
CLAMP_PROTOTYPE_(u16)
CLAMP_PROTOTYPE_(i16)
CLAMP_PROTOTYPE_(u32)
CLAMP_PROTOTYPE_(i32)
CLAMP_PROTOTYPE_(u64)
CLAMP_PROTOTYPE_(i64)
CLAMP_PROTOTYPE_(f32)
CLAMP_PROTOTYPE_(f64)

#define CMP_PROTOTYPE_(t) t cmp_##t(const void *a, const void *b);
CMP_PROTOTYPE_(u8)
CMP_PROTOTYPE_(i8)
CMP_PROTOTYPE_(u16)
CMP_PROTOTYPE_(i16)
CMP_PROTOTYPE_(u32)
CMP_PROTOTYPE_(i32)
CMP_PROTOTYPE_(u64)
CMP_PROTOTYPE_(i64)
CMP_PROTOTYPE_(f32)
CMP_PROTOTYPE_(f64)

bool eq_f32(f32 a, f32 b, f32 eps);
bool eq_v2i(v2i v1, v2i v2);
bool eq_rec(rec r1, rec r2);
bool isPointInRec(rec r, v2f p);
rec divides_rec(rec r, f32 val);
rec multiply_rec(rec r, f32 val);
v2f multiply_v2f(v2f v, f32 val);
// END ZMATH

// BEGIN ZARENA
#define KILOBYTES(number) ((number) * 1024ull)
#define MEGABYTES(number) (KILOBYTES(number) * 1024ull)
#define GIGABYTES(number) (MEGABYTES(number) * 1024ull)
#define TERABYTES(number) (GIGABYTES(number) * 1024ull)

// macos memory management: https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/AboutMemory.html
// Untangling Lifetimes - The Arena Allocator: https://www.rfleury.com/p/untangling-lifetimes-the-arena-allocator

typedef struct {
    u8* memory;
    u8* ptr;
    u64 capacity;
} Arena;

Arena* newArena(u64 size);
Arena* newArenaa(Arena* arena, u64 size);
void* allocate(Arena* a, u64 size);
void* reallocate(Arena* a, void* ptr, u64 oldsize, u64 newsize);
void clear(Arena* a);
void freeArena(Arena* a);
// END ZARENA

// BEGIN ZRESULT
typedef enum {
    SUCCESS = 0,
    ERROR_UNEXPECTED,
    ERROR_OUT_OF_BOUNDS,
    ERROR_NULL
} ErrorTypeInternal;

typedef i32 Error;

%TEMPLATE_BEGIN%
typedef struct sResult_%TYPENP% {
    %TYPE% result;
    Error error;
} Result_%TYPENP%;

Result_%TYPENP% fail_%TYPENP%(Error error);
Result_%TYPENP% faild_%TYPENP%(Error error, %TYPE% defaultResult);
Result_%TYPENP% success_%TYPENP%(%TYPE% result);
%TEMPLATE_END%
// END ZRESULT

// BEGIN ZARRAY
%TEMPLATE_BEGIN%
typedef struct sArray_%TYPENP% {
    %TYPE%* items;
    u32 length;
    u32 capacity;
} Array_%TYPENP%;

#define for_%TYPENP%(it, arr)\
  for (u32 (idx__##it##__) = 0, cont__##it##__ = 1; (idx__##it##__) < (arr)->length; (idx__##it##__)++, cont__##it##__ = 1)\
    for (%TYPE% (it) = get_%TYPENP%((arr), (idx__##it##__)).result; cont__##it##__; cont__##it##__ = 0)

Array_%TYPENP%* newArray_%TYPENP%(Arena* arena);
Array_%TYPENP%* newArrayc_%TYPENP%(Arena* arena, u32 capacity);
Array_%TYPENP%* newArrayl_%TYPENP%(Arena* arena, u32 length);
Array_%TYPENP%* newArraya_%TYPENP%(Arena* arena, %TYPE%* array, u32 len);
Result_%TYPENP% get_%TYPENP%(Array_%TYPENP%* array, u32 i);
%TYPE% getd_%TYPENP%(Array_%TYPENP%* array, u32 i, %TYPE% defaultResult);
%TYPE% getcb_%TYPENP%(Arena* arena, Array_%TYPENP%* array, u32 i, %TYPE% (*callback)(Arena* arena));
Error set_%TYPENP%(Array_%TYPENP%* array, u32 i, %TYPE% val);
Error shrinkLength_%TYPENP%(Array_%TYPENP%* array, u32 i);
void push_%TYPENP%(Arena* arena, Array_%TYPENP%* array, %TYPE% element);
%TYPE% pop_%TYPENP%(Array_%TYPENP%* array);
%TYPE% popFront_%TYPENP%(Array_%TYPENP%* array);
void clear_%TYPENP%(Array_%TYPENP%* array);
void insert_%TYPENP%(Arena* arena, Array_%TYPENP%* array, u32 i, %TYPE% element);
Error remove_%TYPENP%(Array_%TYPENP%* array, u32 i);
%TEMPLATE_END%
// END ZARRAY

// BEGIN ZSTRING
// https://stackoverflow.com/questions/5290182/how-many-bytes-does-one-unicode-character-take
typedef struct sString {
    char* chars;
    u32 length;
} String;

typedef struct sString StringView;

String* newStringc(Arena* arena, char* str, u32 len);
String* newStrings(Arena* arena, String* str);
bool eq(String* str1, String* str2);
String* cat(Arena* arena, String* str1, String* str2);
char* cstr(Arena* arena, String* str);
Result_char getChar(String* str, u32 i);
void getSlice(String* str, StringView* res, u32 start, u32 end);

#define newString(arena, str) newStringc(arena, str, strlen(str))
#define ns(arena, str) newStringc(arena, str, strlen(str))
#define String(str) (String){str, strlen(str)}
#define s(str) (String){str, strlen(str)}
// END ZSTRING

#ifdef ZSL_IMPLEMENTATION
#undef ZSL_IMPLEMENTATION

// BEGIN ZTYPES
#include <float.h>
#include <limits.h>

u32 safeTrunc_u64_u32(u64 value)
{
  assert(value <= 0xFFFFFFFF);
  return (u32)value;
}

f32 safeTrunc_u64_f32(u64 value)
{
  assert(FLT_MIN <= value && value <= FLT_MAX);
  return (f32)value;
}

i32 safeTrunc_u32_i32(u32 value)
{
  assert(value <= 2147483648);
  return (i32)value;
}

f32 safeTrunc_u32_f32(u32 value)
{
  assert(value <= FLT_MAX);
  return (f32)value;
}

f32 safeTrunc_i32_f32(i32 value)
{
  assert(0 <= value && value <= FLT_MAX);
  return (f32)value;
}

i32 safeTrunc_f32_i32(f32 value)
{
  assert(INT_MIN <= value && value <= INT_MAX); // probs not necessary
  return (i32)value;
}
// END ZTYPES

// BEGIN ZMATH
#include <math.h>

#define MIN_IMPLEMENTATION_(t) t min_##t(t a, t b) { return a < b ? a : b; }
MIN_IMPLEMENTATION_(u8)
MIN_IMPLEMENTATION_(i8)
MIN_IMPLEMENTATION_(u16)
MIN_IMPLEMENTATION_(i16)
MIN_IMPLEMENTATION_(u32)
MIN_IMPLEMENTATION_(i32)
MIN_IMPLEMENTATION_(u64)
MIN_IMPLEMENTATION_(i64)
MIN_IMPLEMENTATION_(f32)
MIN_IMPLEMENTATION_(f64)

#define MAX_IMPLEMENTATION_(t) t max_##t(t a, t b) { return a > b ? a : b; }
MAX_IMPLEMENTATION_(u8)
MAX_IMPLEMENTATION_(i8)
MAX_IMPLEMENTATION_(u16)
MAX_IMPLEMENTATION_(i16)
MAX_IMPLEMENTATION_(u32)
MAX_IMPLEMENTATION_(i32)
MAX_IMPLEMENTATION_(u64)
MAX_IMPLEMENTATION_(i64)
MAX_IMPLEMENTATION_(f32)
MAX_IMPLEMENTATION_(f64)

#define CLAMP_IMPLEMENTATION_(t) t clamp_##t(t val, t mn, t mx)\
    {\
      return max_##t(min_##t(val , mx), mn);\
    }
CLAMP_IMPLEMENTATION_(u8)
CLAMP_IMPLEMENTATION_(i8)
CLAMP_IMPLEMENTATION_(u16)
CLAMP_IMPLEMENTATION_(i16)
CLAMP_IMPLEMENTATION_(u32)
CLAMP_IMPLEMENTATION_(i32)
CLAMP_IMPLEMENTATION_(u64)
CLAMP_IMPLEMENTATION_(i64)
CLAMP_IMPLEMENTATION_(f32)
CLAMP_IMPLEMENTATION_(f64)

#define CMP_IMPLEMENTATION_(t) t cmp_##t(const void *a, const void *b)\
    {\
        return (*(t *)a - *(t *)b);\
    }
CMP_IMPLEMENTATION_(u8)
CMP_IMPLEMENTATION_(i8)
CMP_IMPLEMENTATION_(u16)
CMP_IMPLEMENTATION_(i16)
CMP_IMPLEMENTATION_(u32)
CMP_IMPLEMENTATION_(i32)
CMP_IMPLEMENTATION_(u64)
CMP_IMPLEMENTATION_(i64)
CMP_IMPLEMENTATION_(f32)
CMP_IMPLEMENTATION_(f64)

bool isPointInRec(rec r, v2f p)
{
  return r.x <= p.x && p.x <= r.x + r.width && r.y <= p.y && p.y <= r.y + r.height;
}

rec divides_rec(rec r, f32 val)
{
  assert(val > 0.0F);
  return (rec){
    .x = r.x / val,
    .y = r.y / val,
    .width = r.width / val,
    .height = r.height / val,
  };
}

rec multiply_rec(rec r, f32 val)
{
  return (rec){
    .x = r.x * val,
    .y = r.y * val,
    .width = r.width * val,
    .height = r.height * val,
  };
}

v2f multiply_v2f(v2f v, f32 val)
{
  return (v2f) {
    .x = v.x * val,
    .y = v.y * val,
  };
}

bool eq_f32(f32 a, f32 b, f32 eps)
{
  return fabs(a - b) <= eps;
}

bool eq_v2i(v2i v1, v2i v2)
{
  return v1.x == v2.x && v1.y == v2.y;
}

bool eq_rec(rec r1, rec r2)
{
  return r1.x == r2.x && r1.y == r2.y && r1.width == r2.width && r1.height == r2.height;
}
// END ZMATH

// BEGIN ZARENA
Arena* newArena(u64 size)
{
    Arena* a = malloc(sizeof(Arena));
    assert(a);
    memset(a, 0, sizeof(Arena));

    a->memory = malloc(size);
    memset(a->memory, 0, size);

    a->ptr = a->memory;
    a->capacity = size;

    return a;
}

Arena* newArenaa(Arena* arena, u64 size)
{
    Arena* a = allocate(arena, sizeof(Arena));
    memset(a, 0, sizeof(Arena));

    a->memory = allocate(arena, size);
    memset(a->memory, 0, size);

    a->ptr = a->memory;
    a->capacity = size;

    return a;
}

void* allocate(Arena* a, u64 size)
{
    assert(((a->ptr - a->memory) + size) < a->capacity);
    u8* ptr = a->ptr;
    a->ptr += size;
    return ptr;
}

void* reallocate(Arena* a, void* ptr, u64 oldsize, u64 newsize)
{
    void* newptr = allocate(a, newsize);
    memcpy(newptr, ptr, oldsize);
    return newptr;
}

void freeArena(Arena* a)
{
    memset(a->memory, 0, a->capacity);
    free(a->memory);
    free(a);
}

void clear(Arena* a)
{
    memset(a->memory, 0, a->capacity);
    a->ptr = a->memory;
}
// END ZARENA

// BEGIN ZRESULT
%TEMPLATE_BEGIN%
Result_%TYPENP% fail_%TYPENP%(Error error)
{
    Result_%TYPENP% res = {0};
    res.error = error;
    return res;
}

Result_%TYPENP% faild_%TYPENP%(Error error, %TYPE% defaultResult)
{
    Result_%TYPENP% res = {0};
    res.result = defaultResult;
    res.error = error;
    return res;
}

Result_%TYPENP% success_%TYPENP%(%TYPE% result)
{
    Result_%TYPENP% res = {0};
    res.result = result;
    res.error = SUCCESS;
    return res;
}
%TEMPLATE_END%
// END ZRESULT

// BEGIN ZARRAY
%TEMPLATE_BEGIN%
Array_%TYPENP%* newArray_%TYPENP%(Arena* arena)
{
    return newArrayc_%TYPENP%(arena, 16);
}

Array_%TYPENP%* newArrayc_%TYPENP%(Arena* arena, u32 capacity)
{
    u32 b2capacity = 1;
    while (b2capacity < capacity)
        b2capacity *= 2;

    Array_%TYPENP%* a = allocate(arena, sizeof(Array_%TYPENP%));
    a->length = 0;
    a->capacity = b2capacity;
    a->items = allocate(arena, sizeof(%TYPE%) * a->capacity);

    return a;
}

Array_%TYPENP%* newArrayl_%TYPENP%(Arena* arena, u32 length)
{
    u32 capacity = 1;
    while (capacity < length)
        capacity *= 2;

    Array_%TYPENP%* a = allocate(arena, sizeof(Array_%TYPENP%));
    a->length = length;
    a->capacity = capacity;
    a->items = allocate(arena, sizeof(%TYPE%) * a->capacity);

    return a;
}

Array_%TYPENP%* newArraya_%TYPENP%(Arena* arena, %TYPE%* array, u32 len)
{
    u32 capacity = 1;
    while (capacity < len)
        capacity *= 2;

    Array_%TYPENP%* a = newArrayc_%TYPENP%(arena, capacity);
    memcpy(a->items, array, sizeof(%TYPE%) * len);
    a->length = len;

    return a;
}

Result_%TYPENP% get_%TYPENP%(Array_%TYPENP%* array, u32 i)
{
    if (i >= array->length)
        return fail_%TYPENP%(ERROR_OUT_OF_BOUNDS);
    return success_%TYPENP%(array->items[i]);
}

%TYPE% getd_%TYPENP%(Array_%TYPENP%* array, u32 i, %TYPE% defaultResult)
{
    if (i >= array->length)
        return defaultResult;
    return array->items[i];
}

%TYPE% getcb_%TYPENP%(Arena* arena, Array_%TYPENP%* array, u32 i, %TYPE% (*callback)(Arena* arena))
{
    if (i >= array->length)
        return callback(arena);
    return array->items[i];
}

Error set_%TYPENP%(Array_%TYPENP%* array, u32 i, %TYPE% val)
{
    if (i >= array->length)
        return ERROR_OUT_OF_BOUNDS;
    array->items[i] = val;
    return SUCCESS;
}

Error shrinkLength_%TYPENP%(Array_%TYPENP%* array, u32 i)
{
  if (i >= array->length)
      return ERROR_OUT_OF_BOUNDS;
  array->length = i;
  return SUCCESS;
}

void push_%TYPENP%(Arena* arena, Array_%TYPENP%* array, %TYPE% element)
{
    array->length++;
    if (array->length >= array->capacity) {
        array->items = reallocate(
            arena,
            array->items,
            sizeof(%TYPE%) * array->capacity,
            sizeof(%TYPE%) * array->capacity * 2ull);
        array->capacity *= 2ull;
    }
    array->items[array->length - 1] = element;
}

%TYPE% pop_%TYPENP%(Array_%TYPENP%* array)
{
    %TYPE% res = array->items[array->length - 1];
    array->length--;
    return res;
}

%TYPE% popFront_%TYPENP%(Array_%TYPENP%* array)
{
    %TYPE% res = array->items[0];
    for (u32 i = 1; i < array->length; i++)
        array->items[i - 1] = array->items[i];
    array->length--;
    return res;
}

void clear_%TYPENP%(Array_%TYPENP%* array)
{
    memset(array->items, 0, sizeof(%TYPE%) * array->length);
    array->length = 0;
}

void insert_%TYPENP%(Arena* arena, Array_%TYPENP%* array, u32 i, %TYPE% element)
{
    array->length++;
    if (array->length >= array->capacity) {
        %TYPE%* newItems = allocate(arena, sizeof(%TYPE%) * array->capacity * 2ull);

        for (u32 i = 0; i < array->length; i++)
            newItems[i] = array->items[i];

        array->items = newItems;
        array->capacity *= 2ull;
    }

    for (u32 j = array->length - 1; j > i; j--)
        set_%TYPENP%(array, j, get_%TYPENP%(array, j - 1).result);

    set_%TYPENP%(array, i, element);
}

Error remove_%TYPENP%(Array_%TYPENP%* array, u32 i)
{
    if (i >= array->length)
        return ERROR_OUT_OF_BOUNDS;

    for (u32 j = i; j < array->length - 1; j++)
        set_%TYPENP%(array, j, get_%TYPENP%(array, j + 1).result);
    array->length--;

    return SUCCESS;
}
%TEMPLATE_END%
// END ZARRAY

// BEGIN ZSTRING
String* newStringc(Arena* arena, char* str, u32 len)
{
    String* s = allocate(arena, sizeof(String));
    s->length = len;
    s->chars = allocate(arena, sizeof(char) * (len + 1));
    memcpy(s->chars, str, s->length);
    s->chars[len + 1] = '\0'; // not necessary, but I like being explicit
    return s;
}

String* newStrings(Arena* arena, String* str)
{
    return newStringc(arena, str->chars, str->length);
}

bool eq(String* str1, String* str2)
{
    u32 s1len = str1->length;
    u32 s2len = str2->length;
    if (s1len != s2len)
        return false;

    bool res = strncmp(str1->chars, str2->chars, s1len);
    return res == 0;
}

String* cat(Arena* arena, String* str1, String* str2)
{
    char* charString = allocate(arena, str1->length + str2->length);
    memcpy(charString, str1->chars, str1->length);
    memcpy(charString + str1->length, str2->chars, str2->length);

    String* s = allocate(arena, sizeof(String));
    s->chars = charString;
    s->length = str1->length + str2->length;
    return s;
}

char* cstr(Arena* arena, String* str)
{
    char* res = allocate(arena, sizeof(char) * str->length + 1);
    memcpy(res, str->chars, str->length);
    res[str->length] = '\0';
    return res;
}

Result_char getChar(String* str, u32 i)
{
    if (i >= str->length)
        return fail_char(ERROR_OUT_OF_BOUNDS);
    return success_char(str->chars[i]);
}

void getSlice(String* str, StringView* res, u32 start, u32 end)
{
  u32 newstart = clamp_u32(start, 0, str->length);
  u32 newend = clamp_u32(end, start, str->length);
  res->chars = str->chars + newstart;
  res->length = newend - newstart;
}
// END ZSTRING

#endif // ZSL_IMPLEMENTATION

#endif // ZSL_H
